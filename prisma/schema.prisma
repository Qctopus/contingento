// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model BusinessContinuityPlan {
  id                  String               @id @default(cuid())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  planInformation     PlanInformation?
  businessOverview    BusinessOverview?
  essentialFunction   EssentialFunction?
  riskAssessment      RiskAssessment?
  strategy            Strategy?
  actionPlan          ActionPlan?
  contactsInformation ContactsInformation?
  testingMaintenance  TestingMaintenance?
}

model PlanInformation {
  id              String   @id @default(cuid())
  planId          String   @unique
  plan            BusinessContinuityPlan @relation(fields: [planId], references: [id])
  companyName     String
  planManager     String
  alternateManager String
  planLocation    String
}

model BusinessOverview {
  id                    String   @id @default(cuid())
  planId                String   @unique
  plan                  BusinessContinuityPlan @relation(fields: [planId], references: [id])
  businessLicenseNumber String
  businessPurpose       String
  productsAndServices   String
  serviceDeliveryMethods String
  operatingHours        String
  keyPersonnel          String
  minimumResources      String
  customerBase          String
  serviceProviderBCP    String
}

model EssentialFunction {
  id                    String   @id @default(cuid())
  planId                String   @unique
  plan                  BusinessContinuityPlan @relation(fields: [planId], references: [id])
  supplyChainManagement String   // JSON array of selected functions
  staffManagement       String   // JSON array of selected functions
  technology            String   // JSON array of selected functions
  productsServices      String   // JSON array of selected functions
  infrastructureFacilities String // JSON array of selected functions
  sales                 String   // JSON array of selected functions
  administration        String   // JSON array of selected functions
}

model RiskAssessment {
  id                  String   @id @default(cuid())
  planId              String   @unique
  plan                BusinessContinuityPlan @relation(fields: [planId], references: [id])
  potentialHazards    String   // JSON array of selected hazards
  hazards             String   // JSON array of selected hazards
}

model Strategy {
  id                  String   @id @default(cuid())
  planId              String   @unique
  plan                BusinessContinuityPlan @relation(fields: [planId], references: [id])
  preventionStrategies String  // JSON array of selected strategies
  responseStrategies   String  // JSON array of selected strategies
  recoveryStrategies   String  // JSON array of selected strategies
  longTermRiskReduction String // JSON string of long-term risk reduction measures
}

model ActionPlan {
  id                    String   @id @default(cuid())
  planId                String   @unique
  plan                  BusinessContinuityPlan @relation(fields: [planId], references: [id])
  actionPlanByRisk      String   // JSON string of action plan by risk level
  implementationTimeline String
  resourceRequirements   String
  responsibleParties     String
  reviewUpdateSchedule   String
  testingAssessmentPlan String   // JSON string of testing and assessment plan
}

model Session {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  currentStep     String
  stepData        String
  businessProfile BusinessProfile?
}

model BusinessProfile {
  id        String   @id @default(cuid())
  sessionId String   @unique
  session   Session  @relation(fields: [sessionId], references: [id])
  name      String
  industry  String
  size      String
  location  String
}

model ContactsInformation {
  id                         String                 @id @default(cuid())
  planId                     String                 @unique
  plan                       BusinessContinuityPlan @relation(fields: [planId], references: [id])
  staffContactInfo           String // JSON array of staff contact information
  keyCustomerContacts        String // JSON array of customer contacts
  supplierInformation        String // JSON array of supplier information
  emergencyServicesUtilities String // JSON array of emergency services
  criticalBusinessInfo       String // Text field for critical business info
  planDistributionList       String // JSON array of distribution list
}

model TestingMaintenance {
  id                      String                 @id @default(cuid())
  planId                  String                 @unique
  plan                    BusinessContinuityPlan @relation(fields: [planId], references: [id])
  planTestingSchedule     String // JSON array of testing schedule
  planRevisionHistory     String // JSON array of revision history
  improvementTracking     String // JSON array of improvement tracking
  annualReviewProcess     String // Text field for annual review process
  triggerEventsForUpdates String // Text field for trigger events
} 