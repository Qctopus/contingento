// This is your Prisma schema file
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model BusinessContinuityPlan {
  id                  String               @id @default(cuid())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  planInformation     PlanInformation?
  businessOverview    BusinessOverview?
  essentialFunction   EssentialFunction?
  riskAssessment      RiskAssessment?
  strategy            Strategy?
  actionPlan          ActionPlan?
  contactsInformation ContactsInformation?
  testingMaintenance  TestingMaintenance?
}

model PlanInformation {
  id                   String                 @id @default(cuid())
  planId               String                 @unique
  plan                 BusinessContinuityPlan @relation(fields: [planId], references: [id])
  companyName          String
  planManager          String
  alternateManager     String?
  physicalPlanLocation String
  digitalPlanLocation  String?
}

model BusinessOverview {
  id                     String                 @id @default(cuid())
  planId                 String                 @unique
  plan                   BusinessContinuityPlan @relation(fields: [planId], references: [id])
  businessLicenseNumber  String
  businessPurpose        String
  productsAndServices    String
  serviceDeliveryMethods String
  operatingHours         String
  keyPersonnel           String
  minimumResources       String
  customerBase           String
  serviceProviderBCP     String
}

model EssentialFunction {
  id                       String                 @id @default(cuid())
  planId                   String                 @unique
  plan                     BusinessContinuityPlan @relation(fields: [planId], references: [id])
  supplyChainManagement    String // JSON array of selected functions
  staffManagement          String // JSON array of selected functions
  technology               String // JSON array of selected functions
  productsServices         String // JSON array of selected functions
  infrastructureFacilities String // JSON array of selected functions
  sales                    String // JSON array of selected functions
  administration           String // JSON array of selected functions
}

model RiskAssessment {
  id               String                 @id @default(cuid())
  planId           String                 @unique
  plan             BusinessContinuityPlan @relation(fields: [planId], references: [id])
  potentialHazards String // JSON array of selected hazards
  hazards          String // JSON array of selected hazards
}

model Strategy {
  id                    String                 @id @default(cuid())
  planId                String                 @unique
  plan                  BusinessContinuityPlan @relation(fields: [planId], references: [id])
  preventionStrategies  String // JSON array of selected strategies
  responseStrategies    String // JSON array of selected strategies
  recoveryStrategies    String // JSON array of selected strategies
  longTermRiskReduction String // JSON string of long-term risk reduction measures
}

model ActionPlan {
  id                     String                 @id @default(cuid())
  planId                 String                 @unique
  plan                   BusinessContinuityPlan @relation(fields: [planId], references: [id])
  actionPlanByRisk       String // JSON string of action plan by risk level
  implementationTimeline String
  resourceRequirements   String
  responsibleParties     String
  reviewUpdateSchedule   String
  testingAssessmentPlan  String // JSON string of testing and assessment plan
}

model Session {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  currentStep     String
  stepData        String
  businessProfile BusinessProfile?
}

model BusinessProfile {
  id        String  @id @default(cuid())
  sessionId String  @unique
  session   Session @relation(fields: [sessionId], references: [id])
  name      String
  industry  String
  size      String
  location  String
}

model ContactsInformation {
  id                         String                 @id @default(cuid())
  planId                     String                 @unique
  plan                       BusinessContinuityPlan @relation(fields: [planId], references: [id])
  staffContactInfo           String // JSON array of staff contact information
  keyCustomerContacts        String // JSON array of customer contacts
  supplierInformation        String // JSON array of supplier information
  emergencyServicesUtilities String // JSON array of emergency services
  criticalBusinessInfo       String // Text field for critical business info
  planDistributionList       String // JSON array of distribution list
}

model TestingMaintenance {
  id                      String                 @id @default(cuid())
  planId                  String                 @unique
  plan                    BusinessContinuityPlan @relation(fields: [planId], references: [id])
  planTestingSchedule     String // JSON array of testing schedule
  planRevisionHistory     String // JSON array of revision history
  improvementTracking     String // JSON array of improvement tracking
  annualReviewProcess     String // Text field for annual review process
  triggerEventsForUpdates String // Text field for trigger events
}

model AnonymousSession {
  id                  String   @id @default(cuid())
  sessionId           String   @unique
  businessName        String // Lowercase for searching
  displayBusinessName String // Original casing for display
  pin                 String // 6-digit PIN
  email               String? // Optional email for recovery
  planData            String // JSON string of the BCP data
  shareableId         String? // Unique ID for shareable links
  allowSharing        Boolean  @default(false)
  createdAt           DateTime @default(now())
  lastAccessed        DateTime @default(now())

  @@unique([businessName, pin])
  @@index([businessName])
  @@index([shareableId])
}

// Admin Management Tables
model AdminBusinessType {
  id                      String   @id @default(cuid())
  businessTypeId          String   @unique // e.g., 'grocery_store', 'restaurant'
  name                    String // e.g., 'Grocery Store'
  localName               String // e.g., 'Local Grocery/Mini-Mart'
  category                String // e.g., 'retail', 'hospitality'
  description             String?
  typicalOperatingHours   String?
  minimumStaff            String?
  minimumEquipment        String? // JSON array
  minimumUtilities        String? // JSON array
  minimumSpace            String?
  essentialFunctions      String? // JSON object with core, support, administrative
  criticalSuppliers       String? // JSON array
  exampleBusinessPurposes String? // JSON array
  exampleProducts         String? // JSON array
  exampleKeyPersonnel     String? // JSON array
  exampleCustomerBase     String? // JSON array
  
  // Characteristic-based dependency system
  dependencies            String? // JSON object with ratings 1-5 for: powerCritical, waterIntensive, touristDependent, supplyChainReliant, perishableGoods, outdoorOperations, coastalExposure
  vulnerabilityMatrix     String? // JSON object mapping each dependency to impact severity
  operationalThresholds   String? // JSON object defining minimum requirements to operate
  
  isActive                Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  businessTypeHazards AdminBusinessTypeHazard[]
  riskProfiles        AdminRiskProfile[]

  @@index([category])
  @@index([dependencies])
}

model AdminHazardType {
  id               String   @id @default(cuid())
  hazardId         String   @unique // e.g., 'hurricane', 'power_outage'
  name             String // e.g., 'Hurricane/Tropical Storm'
  category         String // e.g., 'natural', 'technological', 'human'
  description      String?
  defaultFrequency String // 'rare', 'unlikely', 'possible', 'likely', 'almost_certain'
  defaultImpact    String // 'minimal', 'minor', 'moderate', 'major', 'catastrophic'
  
  // Caribbean-specific risk taxonomy
  seasonalPattern  String? // e.g., "june-november" for hurricanes, "year-round" for earthquakes
  peakMonths       String? // JSON array of months when risk is highest, e.g., ["8", "9", "10"]
  warningTime      String? // e.g., "days", "hours", "minutes", "none"
  geographicScope  String? // e.g., "localized", "regional", "island-wide", "multi-island"
  cascadingRisks   String? // JSON array of hazardIds that typically follow this hazard
  
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  businessTypeHazards AdminBusinessTypeHazard[]
  locationHazards     AdminLocationHazard[]
  hazardStrategies    AdminHazardStrategy[]
  hazardActionPlans   AdminHazardActionPlan[]
  AdminActionPlan     AdminActionPlan?

  @@index([category])
  @@index([seasonalPattern])
  @@index([geographicScope])
}

model AdminLocation {
  id          String   @id @default(cuid())
  country     String // e.g., 'Jamaica'
  countryCode String // e.g., 'JM'
  parish      String? // e.g., 'Kingston', null for country-level
  isCoastal   Boolean  @default(false) // coastal modifier
  isUrban     Boolean  @default(false) // urban modifier
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  locationHazards AdminLocationHazard[]
  riskProfiles    AdminRiskProfile[]

  @@unique([countryCode, parish])
  @@index([countryCode])
}

model AdminBusinessTypeHazard {
  id             String   @id @default(cuid())
  businessTypeId String
  hazardId       String
  riskLevel      String // 'low', 'medium', 'high', 'very_high'
  frequency      String? // Override default frequency
  impact         String? // Override default impact
  notes          String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  businessType AdminBusinessType @relation(fields: [businessTypeId], references: [businessTypeId], onDelete: Cascade)
  hazard       AdminHazardType   @relation(fields: [hazardId], references: [hazardId], onDelete: Cascade)

  @@unique([businessTypeId, hazardId])
  @@index([businessTypeId])
  @@index([hazardId])
}

model AdminLocationHazard {
  id         String   @id @default(cuid())
  locationId String
  hazardId   String
  riskLevel  String // 'low', 'medium', 'high', 'very_high'
  frequency  String? // Override default frequency
  impact     String? // Override default impact
  notes      String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  location AdminLocation   @relation(fields: [locationId], references: [id], onDelete: Cascade)
  hazard   AdminHazardType @relation(fields: [hazardId], references: [hazardId], onDelete: Cascade)

  @@unique([locationId, hazardId])
  @@index([locationId])
  @@index([hazardId])
}

model AdminStrategy {
  id          String   @id @default(cuid())
  strategyId  String   @unique // e.g., 'maintenance', 'physical_security'
  title       String // e.g., 'Regular Maintenance'
  description String // Description of the strategy
  category    String // 'prevention', 'response', 'recovery'
  reasoning   String? // Why this strategy is effective
  icon        String? // Emoji or icon identifier
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  hazardStrategies AdminHazardStrategy[]

  @@index([category])
}

model AdminHazardStrategy {
  id            String   @id @default(cuid())
  hazardId      String
  strategyId    String
  businessTypes String? // JSON array of business types this applies to (null = all)
  priority      String   @default("medium") // 'low', 'medium', 'high'
  isRecommended Boolean  @default(false) // Auto-selected for matching business types
  notes         String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  hazard   AdminHazardType @relation(fields: [hazardId], references: [hazardId], onDelete: Cascade)
  strategy AdminStrategy   @relation(fields: [strategyId], references: [strategyId], onDelete: Cascade)

  @@unique([hazardId, strategyId])
  @@index([hazardId])
  @@index([strategyId])
}

model AdminActionPlan {
  id                    String   @id @default(cuid())
  hazardId              String   @unique
  resourcesNeeded       String // JSON array
  immediateActions      String // JSON array of action items
  shortTermActions      String // JSON array of action items
  mediumTermActions     String // JSON array of action items
  longTermReduction     String // JSON array
  businessTypeModifiers String? // JSON object with business type specific modifications
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  hazard                AdminHazardType         @relation(fields: [hazardId], references: [hazardId], onDelete: Cascade)
  AdminHazardActionPlan AdminHazardActionPlan[]
}

model AdminHazardActionPlan {
  id            String   @id @default(cuid())
  hazardId      String
  actionPlanId  String
  businessTypes String? // JSON array of business types this applies to (null = all)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations  
  hazard     AdminHazardType @relation(fields: [hazardId], references: [hazardId], onDelete: Cascade)
  actionPlan AdminActionPlan @relation(fields: [actionPlanId], references: [id], onDelete: Cascade)

  @@unique([hazardId, actionPlanId])
  @@index([hazardId])
}

model AdminRiskProfile {
  id                    String   @id @default(cuid())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  businessTypeId        String
  locationId            String
  calculatedRisks       String   // JSON array of {hazardId, riskLevel, reasoning, seasonalAdjustment, coastalMultiplier}
  recommendedStrategies String   // JSON array of {strategyId, priority, effectiveness, cost, roi, conflicts}
  lastCalculated        DateTime @default(now())
  riskScore             Int      // Overall risk score (1-100)
  businessType          AdminBusinessType @relation(fields: [businessTypeId], references: [id])
  location              AdminLocation @relation(fields: [locationId], references: [id])

  @@unique([businessTypeId, locationId])
  @@index([businessTypeId])
  @@index([locationId])
}

// Parish Risk Management System
model Parish {
  id          String   @id @default(cuid())
  name        String   // e.g., 'Kingston', 'St. Andrew'
  region      String   // e.g., 'Kingston Metropolitan', 'North Coast'
  countryCode String   @default("JM") // ISO country code
  isCoastal   Boolean  @default(false)
  isUrban     Boolean  @default(false)
  population  Int      @default(0)
  area        Float?   // Square kilometers
  elevation   Float?   // Meters above sea level
  coordinates String?  // JSON: {"lat": 18.0179, "lng": -76.8099}
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)

  // Relations
  parishRisk ParishRisk?
  businessRiskProfiles BusinessRiskProfile[]

  @@index([region])
  @@index([countryCode])
  @@index([isCoastal])
  @@index([isUrban])
}

model ParishRisk {
  id           String   @id @default(cuid())
  parishId     String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastUpdated  DateTime @default(now())
  updatedBy    String   @default("system")

  // Risk levels (0-10 scale)
  hurricaneLevel    Int    @default(0)
  hurricaneNotes    String @default("")
  floodLevel        Int    @default(0)
  floodNotes        String @default("")
  earthquakeLevel   Int    @default(0)
  earthquakeNotes   String @default("")
  droughtLevel      Int    @default(0)
  droughtNotes      String @default("")
  landslideLevel    Int    @default(0)
  landslideNotes    String @default("")
  powerOutageLevel  Int    @default(0)
  powerOutageNotes  String @default("")

  // Complete risk profile as JSON to support dynamic risk types
  riskProfileJson   String @default("{}")

  isActive Boolean @default(true)

  // Relations
  parish     Parish          @relation(fields: [parishId], references: [id], onDelete: Cascade)
  changeLogs RiskChangeLog[]

  @@index([parishId])
}

model RiskChangeLog {
  id            String   @id @default(cuid())
  parishRiskId  String
  riskType      String   // 'hurricane', 'flood', etc.
  oldLevel      Int
  newLevel      Int
  oldNotes      String   @default("")
  newNotes      String   @default("")
  changedBy     String
  changeReason  String?
  createdAt     DateTime @default(now())

  // Relations
  parishRisk ParishRisk @relation(fields: [parishRiskId], references: [id], onDelete: Cascade)

  @@index([parishRiskId])
  @@index([riskType])
  @@index([createdAt])
}

// Business Type Risk Management System
model BusinessType {
  id                    String   @id @default(cuid())
  businessTypeId        String   @unique // e.g., 'restaurant', 'grocery_store'
  name                  String   // e.g., 'Restaurant', 'Grocery Store'
  category              String   // e.g., 'hospitality', 'retail', 'services'
  subcategory           String?  // e.g., 'casual_dining', 'convenience_store'
  description           String?
  typicalRevenue        String?  // e.g., 'JMD 2M-10M annually'
  typicalEmployees      String?  // e.g., '5-15 employees'
  operatingHours        String?  // e.g., '6AM-10PM'
  seasonalityFactor     Float?   @default(1.0) // 0.5-2.0, where 1.0 = no seasonality
  touristDependency     Int?     @default(0)   // 0-10 scale
  supplyChainComplexity Int?     @default(1)   // 1-10 scale
  digitalDependency     Int?     @default(1)   // 1-10 scale
  cashFlowPattern       String?  @default("stable") // 'stable', 'seasonal', 'volatile'
  physicalAssetIntensity Int?    @default(3)   // 1-10 scale
  customerConcentration Int?     @default(3)   // 1-10 scale (higher = more concentrated)
  regulatoryBurden      Int?     @default(2)   // 1-10 scale
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  riskVulnerabilities BusinessRiskVulnerability[]
  businessTypeStrategies BusinessTypeStrategy[]
  businessRiskProfiles BusinessRiskProfile[]

  @@index([category])
  @@index([businessTypeId])
}

model BusinessRiskVulnerability {
  id                   String   @id @default(cuid())
  businessTypeId       String
  riskType             String   // 'hurricane', 'flood', 'earthquake', 'drought', 'landslide', 'powerOutage'
  vulnerabilityLevel   Int      @default(5) // 1-10 scale (how vulnerable this business type is)
  impactSeverity       Int      @default(5) // 1-10 scale (how severe impact would be)
  recoveryTime         String?  @default("medium") // 'hours', 'days', 'weeks', 'months'
  reasoning            String   @default("")
  mitigationDifficulty Int?     @default(3) // 1-10 scale (how hard to mitigate)
  costToRecover        String?  @default("medium") // 'low', 'medium', 'high', 'very_high'
  businessImpactAreas  String?  // JSON: ['operations', 'supply_chain', 'customers', 'staff', 'assets']
  criticalDependencies String?  // JSON: ['power', 'water', 'internet', 'suppliers', 'transportation']
  isActive             Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  businessType BusinessType @relation(fields: [businessTypeId], references: [id], onDelete: Cascade)

  @@unique([businessTypeId, riskType])
  @@index([businessTypeId])
  @@index([riskType])
}

model RiskMitigationStrategy {
  id                     String   @id @default(cuid())
  strategyId             String   @unique // e.g., 'backup_generator', 'emergency_fund'
  name                   String   // e.g., 'Backup Generator System'
  category               String   // 'prevention', 'preparation', 'response', 'recovery'
  description            String
  smeDescription         String?  // Simplified description for SMEs
  whyImportant           String?  // Why this strategy matters
  implementationCost     String?  @default("medium") // 'low', 'medium', 'high', 'very_high'
  timeToImplement        String?  @default("medium") // 'hours', 'days', 'weeks', 'months'
  effectiveness          Int?     @default(7) // 1-10 scale
  applicableRisks        String   // JSON array of risk types this strategy addresses
  applicableBusinessTypes String? // JSON array of business type categories (null = all)
  prerequisites          String?  // JSON array of requirements
  maintenanceRequirement String?  @default("low") // 'low', 'medium', 'high'
  roi                    Float?   @default(3.0) // Return on investment multiplier
  priority               String?  @default("medium") // 'low', 'medium', 'high', 'critical'
  helpfulTips            String?  // JSON array of tips
  commonMistakes         String?  // JSON array of common mistakes
  successMetrics         String?  // JSON array of success metrics
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  businessTypeStrategies BusinessTypeStrategy[]
  actionSteps            ActionStep[]

  @@index([category])
  @@index([strategyId])
}

model ActionStep {
  id                String                 @id @default(cuid())
  strategyId        String
  stepId            String                 // e.g., 'step_1', 'step_2'
  phase             String                 @default("immediate") // 'immediate', 'short_term', 'medium_term', 'long_term'
  title             String
  description       String
  smeAction         String?                // Simplified action description for SMEs
  timeframe         String?
  responsibility    String?
  estimatedCost     String?
  estimatedCostJMD  String?
  resources         String?                // JSON array of required resources
  checklist         String?                // JSON array of checklist items
  sortOrder         Int                    @default(0) // For ordering steps within a strategy
  isActive          Boolean                @default(true)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt

  // Relations
  strategy RiskMitigationStrategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@unique([strategyId, stepId])
  @@index([strategyId])
  @@index([phase])
}

model BusinessTypeStrategy {
  id             String   @id @default(cuid())
  businessTypeId String
  strategyId     String
  relevanceScore Int?     @default(7) // 1-10 scale for this specific business type
  customNotes    String?
  isRecommended  Boolean? @default(true)
  priority       String?  @default("medium") // 'low', 'medium', 'high', 'critical'
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  businessType BusinessType          @relation(fields: [businessTypeId], references: [id], onDelete: Cascade)
  strategy     RiskMitigationStrategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@unique([businessTypeId, strategyId])
}

model BusinessRiskProfile {
  id                    String   @id @default(cuid())
  businessTypeId        String
  parishId              String
  combinedRisks         String   // JSON: combined location + business type risks
  recommendedStrategies String   // JSON: top recommended strategies
  overallRiskScore      Int      // 1-100 combined risk score
  priorityActions       String?  // JSON: immediate actions to take
  calculatedAt          DateTime @default(now())
  calculatedBy          String?  @default("system")
  isActive              Boolean  @default(true)

  // Relations
  businessType BusinessType @relation(fields: [businessTypeId], references: [id], onDelete: Cascade)
  parish       Parish       @relation(fields: [parishId], references: [id], onDelete: Cascade)

  @@unique([businessTypeId, parishId])
  @@index([businessTypeId])
  @@index([parishId])
}
